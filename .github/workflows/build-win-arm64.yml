name: Build OpenCVSharp ARM64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-opencv-arm64:
    runs-on: windows-latest

    steps:
      - name: Checkout OpenCVSharp
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup Ninja
        run: choco install -y ninja

      - name: Cache OpenCV
        id: cache-opencv
        uses: actions/cache@v4
        with:
          path: D:\opencv-install
          key: opencv-4.11.0-msvc-vs17-arm64-v2-${{ runner.os }}

      - name: Clone OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d D:\
          git clone --depth 1 --branch 4.11.0 https://github.com/opencv/opencv.git
          git clone --depth 1 --branch 4.11.0 https://github.com/opencv/opencv_contrib.git

      - name: Configure OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          for /f "usebackq delims=" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.ARM64 -property installationPath`) do set VSINSTALL=%%i
          call "%VSINSTALL%\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x64 -no_logo
          cd /d D:\opencv
          if exist build rmdir /s /q build
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A ARM64 ^
            -D CMAKE_BUILD_TYPE=Release ^
            -D CMAKE_INSTALL_PREFIX=D:\opencv-install ^
            -D OPENCV_EXTRA_MODULES_PATH=D:\opencv_contrib\modules ^
            -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF ^
            -D BUILD_opencv_apps=OFF ^
            -D BUILD_opencv_world=ON ^
            -D BUILD_opencv_dnn=OFF ^
            -D WITH_FFMPEG=OFF ^
            ..
          echo.
          echo ===== Configuration Summary =====
          findstr /C:"BUILD_opencv_world" CMakeCache.txt
          findstr /C:"CMAKE_INSTALL_PREFIX" CMakeCache.txt

      - name: Build OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d D:\opencv\build
          cmake --build . --config Release --parallel
          echo.
          echo ===== Recherche des fichiers generes =====
          dir /s /b D:\opencv\build\lib\Release\opencv*.lib 2>nul
          dir /s /b D:\opencv\build\bin\Release\opencv*.dll 2>nul
          echo.
  
      - name: Manual Install of OpenCV binaries
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d D:\opencv\build
          cmake --install .
          echo.
          echo ===== Copie manuelle des binaires si necessaire =====
          if not exist "D:\opencv-install\ARM64" mkdir "D:\opencv-install\ARM64"
          if not exist "D:\opencv-install\ARM64\vc17" mkdir "D:\opencv-install\ARM64\vc17"
          if not exist "D:\opencv-install\ARM64\vc17\lib" mkdir "D:\opencv-install\ARM64\vc17\lib"
          if not exist "D:\opencv-install\ARM64\vc17\bin" mkdir "D:\opencv-install\ARM64\vc17\bin"
  
          xcopy /Y D:\opencv\build\lib\Release\*.lib D:\opencv-install\ARM64\vc17\lib\ 2>nul
          xcopy /Y D:\opencv\build\bin\Release\*.dll D:\opencv-install\ARM64\vc17\bin\ 2>nul
  
          echo ===== Verification finale =====
          dir /b D:\opencv-install\ARM64\vc17\lib\*.lib
          dir /b D:\opencv-install\ARM64\vc17\bin\*.dll

      - name: Build OpenCVSharp Native
        shell: cmd
        run: |
          for /f "usebackq delims=" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.ARM64 -property installationPath`) do set VSINSTALL=%%i
          call "%VSINSTALL%\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x64 -no_logo
      
          cd /d ${{ github.workspace }}
          if exist build_native rmdir /s /q build_native
          mkdir build_native
          cd build_native
      
          cmake -G "Visual Studio 17 2022" -A ARM64 ^
            -D CMAKE_BUILD_TYPE=Release ^
            -D OpenCV_DIR=D:\opencv-install ^
            -D CMAKE_INSTALL_PREFIX=%CD%\install ^
            ..\src\OpenCvSharpExtern
      
          cmake --build . --config Release
          cmake --install .

      - name: Upload Native Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencvsharp-native-arm64-windows
          path: build_native/install/**/*
